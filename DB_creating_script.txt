-- This script was created by east

BEGIN;

-- CREATE COMMON TABLES
CREATE TABLE IF NOT EXISTS public.version
(
    id         SERIAL PRIMARY KEY NOT NULL,
    version    TEXT               NOT NULL  DEFAULT '1.0.2'
);
INSERT INTO version VALUES (DEFAULT, DEFAULT); 

CREATE TABLE IF NOT EXISTS public.conv
(
    id             SERIAL  PRIMARY KEY NOT NULL,
    belt_length    integer             NOT NULL DEFAULT 17360000,
    belt_width     integer             NOT NULL DEFAULT 336000,
    belt_thickness integer             NOT NULL DEFAULT 630
);
INSERT INTO conv VALUES (DEFAULT, DEFAULT,DEFAULT, DEFAULT); 


CREATE TABLE IF NOT EXISTS public.object_type
(
    id   SERIAL PRIMARY KEY NOT NULL,
    name text               NOT NULL DEFAULT 'unspecified'
);
INSERT INTO object_type VALUES (DEFAULT, 'defect'); 
INSERT INTO object_type VALUES (DEFAULT, 'conv_state'); 
INSERT INTO object_type VALUES (DEFAULT, 'history'); 
INSERT INTO object_type VALUES (DEFAULT, 'photo'); 

CREATE TABLE IF NOT EXISTS public.objects
(
    id    SERIAL   PRIMARY KEY NOT NULL,
    type  integer              NOT NULL,
    time  timestamp            NOT NULL,
    CONSTRAINT obj_fk1
    FOREIGN KEY (type) REFERENCES public.object_type (id) ON DELETE CASCADE	
);

CREATE TABLE IF NOT EXISTS public.defect_type
(
    id                    SERIAL PRIMARY KEY NOT NULL,
    name                  text               NOT NULL,
    is_belt               boolean            NOT NULL DEFAULT true,
    width_critical        integer            NOT NULL DEFAULT 500,
    length_critical       integer            NOT NULL DEFAULT 500,
    location_width_shift  integer            NOT NULL DEFAULT 50,
    location_length_shift integer            NOT NULL DEFAULT 500,
    time_for_comparison   integer            NOT NULL DEFAULT 30,
    width_extreme         integer            NOT NULL DEFAULT 400,
    length_extreme        integer            NOT NULL DEFAULT 400                 
);
INSERT INTO defect_type VALUES (DEFAULT, 'chip', false, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'delamination', false, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'rope', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'crack', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'liftup', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'hole', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'tear', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'wear', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'joint', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 
INSERT INTO defect_type VALUES (DEFAULT, 'joint_worn', DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT); 

CREATE TABLE IF NOT EXISTS public.photo
(
    id                       SERIAL PRIMARY KEY NOT NULL,
    obj_id                   integer            NOT NULL,
    image                    bytea              NOT NULL,             
    CONSTRAINT ph_fk1
    FOREIGN KEY (obj_id) REFERENCES public.objects (id) ON DELETE CASCADE    
);

CREATE TABLE IF NOT EXISTS public.defects
(
    id                       SERIAL PRIMARY KEY NOT NULL,
    obj_id                   integer            NOT NULL,
    type                     integer            NOT NULL,
    box_width                integer            NOT NULL,
    box_length               integer            NOT NULL,
    location_width_in_frame  integer            NOT NULL,
    location_length_in_frame integer            NOT NULL,
    location_width_in_conv   integer            NOT NULL,
    location_length_in_conv  integer            NOT NULL,
    photo_id                 integer            NOT NULL,
    probability              integer            NOT NULL,
    is_critical              boolean            NOT NULL DEFAULT false,
    is_extreme               boolean            NOT NULL DEFAULT false,
    CONSTRAINT def_fk1
    FOREIGN KEY (obj_id) REFERENCES public.objects (id) ON DELETE CASCADE,	
    CONSTRAINT def_fk2
    FOREIGN KEY (type) REFERENCES public.defect_type (id) ON DELETE CASCADE,
    CONSTRAINT def_fk3
    FOREIGN KEY (photo_id) REFERENCES public.photo (id) ON DELETE CASCADE  
);


CREATE TABLE IF NOT EXISTS public.relation
(
    id_current  integer NOT NULL,
    id_previous integer NOT NULL,
    PRIMARY KEY (id_current, id_previous),
    CONSTRAINT rel_fk1
    FOREIGN KEY (id_current) REFERENCES public.defects (id) ON DELETE CASCADE,	
    CONSTRAINT rel_fk2
    FOREIGN KEY (id_previous) REFERENCES public.defects (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.history_type
(
    id   SERIAL PRIMARY KEY NOT NULL,
    name text               NOT NULL
);
INSERT INTO history_type VALUES (DEFAULT, 'error'); 
INSERT INTO history_type VALUES (DEFAULT, 'warning'); 
INSERT INTO history_type VALUES (DEFAULT, 'info'); 
INSERT INTO history_type VALUES (DEFAULT, 'critical_defect'); 
INSERT INTO history_type VALUES (DEFAULT, 'extreme_defect'); 
INSERT INTO history_type VALUES (DEFAULT, 'action_info');
INSERT INTO history_type VALUES (DEFAULT, 'report_info');
INSERT INTO history_type VALUES (DEFAULT, 'message');
INSERT INTO history_type VALUES (DEFAULT, 'state_of_devices');
 
CREATE TABLE IF NOT EXISTS public.history
(
    id     SERIAL PRIMARY KEY NOT NULL,
    id_obj integer            NOT NULL,
    action text               NOT NULL,
    type   integer            NOT NULL,
    CONSTRAINT his_fk1
    FOREIGN KEY (id_obj) REFERENCES public.objects (id) ON DELETE CASCADE,	
    CONSTRAINT his_fk2
    FOREIGN KEY (type) REFERENCES public.history_type (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS public.state_of_conv
(
    id          SERIAL PRIMARY KEY NOT NULL,
    id_obj      integer            NOT NULL,
    is_critical boolean            NOT NULL DEFAULT false,
    is_extreme  boolean            NOT NULL DEFAULT false,
    CONSTRAINT state_fk1
    FOREIGN KEY (id_obj) REFERENCES public.objects (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS public.camera_settings
(
    id                       SERIAL PRIMARY KEY NOT NULL,
    mm_pix                   integer            NOT NULL
);

CREATE EXTENSION IF NOT EXISTS plpython3u;

CREATE OR REPLACE FUNCTION send_notification_about_new_defect()
RETURNS TRIGGER AS $$

import requests
import sys
sys.path.append("D:/source/repos/Conveyor-Belt-Monitoring-Web-Application/application")
from .notification_service import TelegramNotification

criticality = ""
if TD["new"]["is_critical"]:
    criticality = "critical"
elif TD["new"]["is_extreme"]:
    criticality = "extreme"
else:
    criticality = "normal"

notification_data = {
    "notification": TelegramNotification(message=f"New {criticality}-level defect with id={TD["new"]["id"]} has appeared on conveyor!")
}
requests.post("http://127.0.0.1:8000/notification/with_telegram", params=notification_data, timeout=3)

return TD["new"]
$$ LANGUAGE plpython3u;

CREATE TRIGGER trigger_of_new_defect
AFTER INSERT ON defects
FOR EACH ROW
EXECUTE FUNCTION send_notification_about_new_defect();

END;